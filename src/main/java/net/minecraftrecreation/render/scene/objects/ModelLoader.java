package net.minecraftrecreation.render.scene.objects;

import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.NotNull;
import org.joml.Vector4f;
import org.lwjgl.PointerBuffer;
import org.lwjgl.assimp.*;
import org.lwjgl.system.MemoryStack;
import ru.morozovit.util.ExcParser;

import java.io.*;
import java.nio.IntBuffer;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

import static net.minecraftrecreation.client.CrashHandler.crash;
import static net.minecraftrecreation.client.Main.logger;
import static net.minecraftrecreation.client.Main.postExit;
import static org.lwjgl.assimp.Assimp.*;
import static ru.morozovit.logging.Loglevel.*;

public class ModelLoader {
    public static final String defaultOBJModel = """
            mtllib model.mtl
            o cube
            v 0.500000 -0.500000 -0.500000
            v 0.500000 -0.500000 0.500000
            v -0.500000 -0.500000 0.500000
            v -0.500000 -0.500000 -0.500000
            v 0.500000 0.500000 -0.500000
            v 0.500000 0.500000 0.500000
            v -0.500000 0.500000 0.500000
            v -0.500000 0.500000 -0.500000
            v 0.500000 -0.500000 -0.500000
            v 0.500000 -0.500000 -0.500000
            v 0.500000 -0.500000 0.500000
            v 0.500000 -0.500000 0.500000
            v -0.500000 -0.500000 -0.500000
            v -0.500000 -0.500000 -0.500000
            v 0.500000 0.500000 -0.500000
            v 0.500000 0.500000 -0.500000
            v -0.500000 -0.500000 0.500000
            v -0.500000 -0.500000 0.500000
            v 0.500000 0.500000 0.500000
            v 0.500000 0.500000 0.500000
            v -0.500000 0.500000 0.500000
            v -0.500000 0.500000 0.500000
            v -0.500000 0.500000 -0.500000
            v -0.500000 0.500000 -0.500000
            
            vt 0.500000 1.000000
            vt 0.500000 0.500000
            vt 1.000000 0.500000
            vt 0.000000 0.500000
            vt 0.000000 0.000000
            vt 0.500000 0.000000
            vt 0.000000 1.000000
            vt 0.000200 1.000000
            vt 0.500000 1.000000
            vt 1.000000 1.000000
            
            vn 0.000000 -1.000000 0.000000
            vn 0.000000 1.000000 0.000000
            vn 1.000000 0.000000 0.000000
            vn 0.000000 0.000000 1.000000
            vn -1.000000 0.000000 0.000000
            vn 0.000000 0.000000 -1.000000
            
            g cubemtl
            usemtl cubemtl
            f 11/1/1 17/2/1 13/3/1
            f 24/4/2 22/5/2 20/6/2
            f 15/1/3 19/7/3 12/4/3
            f 6/1/4 21/8/4 18/4/4
            f 3/2/5 7/9/5 23/7/5
            f 1/4/6 4/2/6 8/1/6
            f 9/10/1 11/1/1 13/3/1
            f 16/2/2 24/4/2 20/6/2
            f 10/2/3 15/1/3 12/4/3
            f 2/2/4 6/1/4 18/4/4
            f 14/4/5 3/2/5 23/7/5
            f 5/7/6 1/4/6 8/1/6
            """;

    public static final String defaultMTLMaterial = """
            newmtl cubemtl
            Kd 0.00 0.00 0.00
            Ka 0.59 0.45 0.35
            Ks 0.59 0.45 0.35
            map_Kd texture.png
            """;

    public static final byte[] defaultTexture = {
            (byte) 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
                0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7A, 0x7A,
            (byte) 0xF4, 0x00, 0x00, 0x03, 0x44, 0x7A, 0x54, 0x58, 0x74, 0x52, 0x61, 0x77, 0x20, 0x70, 0x72, 0x6F,
                0x66, 0x69, 0x6C, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x65, 0x78, 0x69, 0x66, 0x00, 0x00,
                0x78, (byte) 0xDA, (byte) 0xED, (byte) 0x97, 0x6D, (byte) 0x8E, (byte) 0xDC, 0x20, 0x0C, (byte) 0x86, (byte) 0xFF, 0x73, (byte) 0x8A, 0x1E, 0x21, (byte) 0xB6,
                0x31, 0x36, (byte) 0xC7, (byte) 0xE1, 0x23, 0x48, (byte) 0xBD, 0x41, (byte) 0x8F, (byte) 0xDF, (byte) 0x97, 0x24, (byte) 0x93, (byte) 0xEE, 0x7C, 0x6C,
                0x67, 0x67, (byte) 0xAB, 0x4A, 0x55, (byte) 0xB5, (byte) 0xA0, 0x01, 0x62, 0x1C, (byte) 0xDB, (byte) 0xF8, 0x01, (byte) 0xB2, 0x1B, (byte) 0xD6,
                0x1F, (byte) 0xDF, 0x47, (byte) 0xF8, (byte) 0x86, (byte) 0xC2, (byte) 0xCC, 0x29, 0x44, 0x35, 0x4F, 0x39, (byte) 0xA5, 0x05, 0x25, (byte) 0xE6,
            (byte) 0x98, (byte) 0xB9, 0x60, (byte) 0xE0, (byte) 0xCB, 0x5E, (byte) 0xCA, (byte) 0xD6, (byte) 0xD2, 0x12, (byte) 0xB7, 0x76, 0x2B, 0x7C, 0x4C, (byte) 0xE1,
            (byte) 0xF9, 0x4A, 0x1E, (byte) 0xCE, 0x09, (byte) 0x86, 0x48, (byte) 0xD0, (byte) 0xCB, (byte) 0xFE, (byte) 0xE8, (byte) 0xE9, (byte) 0xD0, (byte) 0xBF, (byte) 0xC8, (byte) 0xE9,
                0x34, (byte) 0xB0, 0x77, 0x05, 0x23, 0x7D, 0x63, (byte) 0xC8, (byte) 0xDB, 0x31, 0x51, (byte) 0xAF, 0x27, 0x72, 0x3C, (byte) 0xEC,
            (byte) 0xFB, (byte) 0x8D, (byte) 0xA1, (byte) 0xC3, (byte) 0xB3, (byte) 0xCC, (byte) 0x88, (byte) 0xE6, (byte) 0xB8, 0x1F, (byte) 0x86, (byte) 0xF2, 0x61, 0x48, 0x78, (byte) 0x9F,
            (byte) 0xA0, (byte) 0xC3, 0x40, (byte) 0xD9, (byte) 0x97, (byte) 0xB5, (byte) 0xA4, (byte) 0xEC, (byte) 0xF6, 0x76, 0x09, 0x75, (byte) 0xDD, (byte) 0xFB, 0x7E, 0x59,
            (byte) 0x89, (byte) 0xEF, (byte) 0xBF, 0x30, (byte) 0x9B, (byte) 0xE8, (byte) 0xD7, 0x61, (byte) 0xDF, 0x3D, 0x1B, (byte) 0xB2, (byte) 0xD7, 0x15, 0x7E, (byte) 0x84,
                0x79, 0x15, (byte) 0x92, 0x05, (byte) 0xAD, (byte) 0xC8, 0x11, (byte) 0x80, (byte) 0xCC, 0x5F, 0x0C, 0x52, 0x30, 0x48, 0x5B, (byte) 0xAB,
            (byte) 0xBC, (byte) 0x8B, (byte) 0x8B, 0x28, (byte) 0xFA, 0x22, (byte) 0xBB, 0x2E, (byte) 0xED, 0x09, 0x79, (byte) 0x94, (byte) 0xA7, (byte) 0xB3, 0x64, 0x44,
                0x34, 0x66, (byte) 0xA8, (byte) 0xF1, (byte) 0xA1, (byte) 0xD2, 0x15, (byte) 0x95, 0x73, 0x44, (byte) 0x8F, (byte) 0xE5, (byte) 0xE1, (byte) 0x96, 0x56, (byte) 0xE4,
                0x43, 0x45, 0x6E, (byte) 0x92, (byte) 0x9C, (byte) 0xCE, (byte) 0xFE, (byte) 0xA1, 0x3C, (byte) 0x90, (byte) 0xDE, 0x4C, (byte) 0xC8, (byte) 0xE9, (byte) 0x87, (byte) 0xDF,
                0x7A, (byte) 0x8E, 0x7E, (byte) 0x8C, (byte) 0xF8, 0x5A, (byte) 0x9E, 0x64, (byte) 0xB1, 0x3D, (byte) 0xA2, (byte) 0x9B, (byte) 0xEC, (byte) 0xCF, (byte) 0xDF, 0x18,
            (byte) 0xDD, (byte) 0xC7, (byte) 0xB6, 0x66, (byte) 0xAC, (byte) 0xA2, (byte) 0xC4, (byte) 0x84, 0x54, (byte) 0xA7, 0x63, 0x51, (byte) 0x97, (byte) 0xA5, 0x6C, 0x23,
            (byte) 0xE8, 0x55, (byte) 0xB8, (byte) 0x98, (byte) 0xAE, 0x3D, 0x20, (byte) 0xB4, 0x04, (byte) 0x9B, 0x09, 0x7B, (byte) 0xC8, (byte) 0xD1, (byte) 0xCF, (byte) 0x9A,
                0x51, 0x1D, (byte) 0xBB, (byte) 0xBA, 0x61, 0x2B, (byte) 0xF4, (byte) 0xA5, 0x2D, 0x15, (byte) 0xB5, 0x51, 0x26, 0x06, (byte) 0xAE, 0x41,
            (byte) 0x91, 0x3A, 0x15, 0x1A, (byte) 0xB4, 0x6E, 0x7D, (byte) 0xA3, (byte) 0x86, 0x10, 0x23, (byte) 0xAF, (byte) 0x81, 0x0D, 0x03, (byte) 0xE6,
            (byte) 0xC6, (byte) 0xB2, 0x09, 0x5D, (byte) 0x8C, 0x33, 0x37, (byte) 0xB0, 0x23, (byte) 0x89, (byte) 0xB3, (byte) 0xD2, 0x60, (byte) 0x93, 0x2C, 0x5D,
                0x1C, 0x24, (byte) 0xDB, (byte) 0x86, 0x3D, 0x0A, (byte) 0x9F, (byte) 0xB1, (byte) 0xD0, (byte) 0xE6, 0x36, 0x2F, 0x2D, 0x6C, (byte) 0xDE, 0x1C,
            (byte) 0x9E, 0x3B, 0x41, (byte) 0x95, 0x09, (byte) 0xC6, 0x08, (byte) 0xAF, (byte) 0xBC, 0x5C, (byte) 0xC3, (byte) 0xAB, 0x2F, (byte) 0x8C, 0x31, (byte) 0x8F,
                0x02, (byte) 0xD1, (byte) 0xE2, 0x67, (byte) 0xAE, 0x10, 0x17, (byte) 0xF3, 0x4C, 0x36, (byte) 0xC2, (byte) 0x98, (byte) 0xE4, 0x66, 0x0B, 0x35,
                0x10, (byte) 0xA1, 0x71, 0x24, 0x55, (byte) 0xB7, 0x04, 0x5F, (byte) 0xEA, 0x6D, (byte) 0x99, 0x5C, 0x05, 0x04, 0x75, 0x66,
                0x79, 0x1E, (byte) 0x91, (byte) 0x8C, (byte) 0xC4, (byte) 0xD6, (byte) 0xDD, 0x44, 0x55, (byte) 0xFA, 0x75, 0x13, (byte) 0xC8, 0x06, 0x5A, (byte) 0xA0,
            (byte) 0xA8, (byte) 0xE8, (byte) 0xF7, 0x33, 0x48, (byte) 0xD6, 0x0F, 0x03, 0x48, 0x11, 0x5C, 0x2B, (byte) 0x82, 0x21, 0x01, 0x01,
                0x50, 0x23, 0x51, 0x4A, (byte) 0xB4, 0x18, (byte) 0xB3, 0x11, 0x21, (byte) 0x91, 0x0E, 0x40, 0x05, (byte) 0xA1, (byte) 0xE3, 0x00,
                0x71, 0x05, 0x01, 0x52, (byte) 0xE5, (byte) 0x8E, 0x20, 0x39, (byte) 0x8A, 0x24, (byte) 0xB0, 0x71, (byte) 0x9E, (byte) 0xAE, (byte) 0xF1, (byte) 0x8A,
            (byte) 0xD1, (byte) 0xA6, (byte) 0xCA, (byte) 0xCA, 0x10, 0x07, (byte) 0xC8, 0x71, (byte) 0x99, (byte) 0x81, (byte) 0x84, (byte) 0xE2, (byte) 0xC4, 0x19, (byte) 0xD8, 0x64,
                0x29, (byte) 0x80, 0x15, (byte) 0xA3, 0x62, (byte) 0xFF, 0x58, 0x74, (byte) 0xEC, (byte) 0xA1, (byte) 0xA2, (byte) 0xA2, 0x51, 0x55, (byte) 0x93, (byte) 0x9A,
            (byte) 0xBA, 0x66, 0x2D, 0x49, 0x52, 0x4C, (byte) 0x9A, 0x52, (byte) 0xB2, 0x34, 0x2F, (byte) 0xC5, 0x62, 0x62, 0x31, (byte) 0x98,
                0x5A, 0x32, 0x33, (byte) 0xB7, 0x6C, (byte) 0xC5, (byte) 0xC5, (byte) 0xA3, (byte) 0xAB, 0x27, 0x37, 0x77, (byte) 0xCF, 0x5E, 0x32, 0x67,
            (byte) 0xC1, (byte) 0xA5, (byte) 0xA9, 0x39, 0x65, (byte) 0xCB, (byte) 0x9E, 0x73, 0x2E, 0x05, 0x3E, 0x0B, 0x2C, 0x17, (byte) 0xBC, 0x5D,
            (byte) 0xA0, 0x50, 0x4A, (byte) 0xE5, 0x2A, 0x35, 0x56, 0x0D, 0x35, 0x55, (byte) 0xAB, 0x5E, 0x73, 0x2D, 0x0D, (byte) 0xDB,
            (byte) 0xA7, (byte) 0xC5, (byte) 0xA6, 0x2D, 0x35, 0x6B, (byte) 0xDE, 0x72, 0x2B, (byte) 0x9D, (byte) 0xBB, 0x74, (byte) 0xDC, 0x1F, 0x3D, 0x75,
            (byte) 0xEB, (byte) 0xDE, 0x73, 0x2F, 0x2B, (byte) 0xAD, (byte) 0xD8, 0x4A, 0x6B, 0x5C, 0x75, 0x4D, (byte) 0xAB, (byte) 0xAD, (byte) 0xBE, (byte) 0xE6,
            (byte) 0xB5, 0x0C, 0x6C, (byte) 0xB5, 0x21, 0x61, (byte) 0xC4, (byte) 0xA1, 0x23, 0x0D, 0x1B, 0x3E, (byte) 0xF2, 0x28, 0x27, (byte) 0xB5,
                0x03, (byte) 0xEB, 0x5D, 0x7D, (byte) 0x81, 0x1A, 0x1D, (byte) 0xD4, 0x78, 0x23, 0x35, 0x15, (byte) 0xED, (byte) 0xA4, 0x06, (byte) 0xA9,
            (byte) 0xD9, (byte) 0xC5, 0x04, (byte) 0xCD, (byte) 0xEB, 0x44, 0x27, 0x33, 0x00, (byte) 0xE3, 0x10, 0x09, (byte) 0xC4, 0x6D, 0x22, (byte) 0xC0,
            (byte) 0x86, (byte) 0xE6, (byte) 0xC9, 0x6C, 0x71, (byte) 0x8A, (byte) 0x91, 0x27, (byte) 0xB9, (byte) 0xC9, 0x6C, (byte) 0xC9, (byte) 0x8C, 0x53, (byte) 0xA1, (byte) 0x8C,
                0x20, 0x75, 0x32, (byte) 0xEB, 0x34, (byte) 0x89, (byte) 0x81, 0x60, 0x5C, (byte) 0x89, 0x75, (byte) 0xD0, (byte) 0x85, 0x5D, (byte) 0xE0, (byte) 0x9D,
            (byte) 0xE8, 0x24, (byte) 0xF7, 0x47, (byte) 0xDC, (byte) 0x82, (byte) 0xC5, 0x2B, 0x6E, (byte) 0xFC, 0x59, 0x72, 0x61, (byte) 0xA2, 0x7B, (byte) 0x91,
            (byte) 0xDC, 0x3D, (byte) 0xB7, 0x47, (byte) 0xD4, (byte) 0xFA, (byte) 0xFC, 0x0C, (byte) 0xB5, (byte) 0x8D, (byte) 0xD8, 0x7E, 0x0A, 0x67, 0x52, 0x17,
            (byte) 0xC1, (byte) 0xE9, (byte) 0xC3, (byte) 0xFC, (byte) 0xEA, (byte) 0x85, (byte) 0xBD, (byte) 0xCC, (byte) 0x8F, (byte) 0xDD, 0x5D, 0x1F, (byte) 0xB6, (byte) 0xC1, 0x48, 0x71,
                0x4A, (byte) 0xB8, (byte) 0xAE, (byte) 0xBD, (byte) 0xE1, 0x76, 0x74, 0x7E, (byte) 0xE7, (byte) 0x85, 0x41, (byte) 0xF5, (byte) 0xD0, (byte) 0xE3, 0x65, 0x34,
            (byte) 0x8B, 0x77, (byte) 0x86, 0x4E, (byte) 0xC5, (byte) 0xCF, 0x1B, 0x0C, (byte) 0x8F, 0x15, 0x5F, 0x37, 0x18, 0x6E, 0x43, (byte) 0xFC,
            (byte) 0xAC, (byte) 0xC1, (byte) 0xF0, (byte) 0xDE, (byte) 0x9A, 0x5F, 0x35, 0x18, (byte) 0x9E, 0x25, (byte) 0xF1, (byte) 0xA3, 0x06, (byte) 0xC3, 0x47, (byte) 0xA9,
                0x3C, 0x33, 0x18, 0x5E, (byte) 0xC5, (byte) 0xFC, (byte) 0x9E, (byte) 0xC1, (byte) 0xF0, (byte) 0xDB, 0x24, 0x3E, (byte) 0xEB, (byte) 0xBF, (byte) 0xA8, (byte) 0xFD,
            (byte) 0x8B, (byte) 0xD4, 0x5E, 0x30, 0x18, (byte) 0xFE, (byte) 0xF4, (byte) 0xFA, (byte) 0xF8, (byte) 0xCB, (byte) 0xF7, (byte) 0xD1, (byte) 0xD3, 0x0D, (byte) 0xF8, 0x45,
            (byte) 0xED, 0x1F, (byte) 0xA4, (byte) 0xF6, (byte) 0xFF, 0x7C, 0x45, (byte) 0x9E, 0x6E, (byte) 0xC8, 0x2F, 0x6A, 0x5F, (byte) 0xDF, (byte) 0xFE, (byte) 0xBF,
                0x7A, 0x1F, (byte) 0xE1, 0x4F, (byte) 0xC4, (byte) 0xF9, (byte) 0xBF, (byte) 0xFE, 0x4F, (byte) 0xE6, (byte) 0xC0, 0x54, 0x0D, 0x39, 0x53, 0x61,
                0x41, 0x00, 0x00, 0x00, 0x60, 0x7A, 0x54, 0x58, 0x74, 0x52, 0x61, 0x77, 0x20, 0x70, 0x72, 0x6F,
                0x66, 0x69, 0x6C, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x70, 0x74, 0x63, 0x00, 0x00,
                0x78, (byte) 0xDA, 0x3D, (byte) 0x89, (byte) 0xC1, 0x0D, (byte) 0xC0, 0x30, 0x08, 0x03, (byte) 0xFF, 0x4C, (byte) 0xD1, 0x11, 0x08, 0x38,
                0x6D, (byte) 0xBA, 0x4E, (byte) 0xE1, (byte) 0x93, 0x5F, 0x1E, (byte) 0xD9, 0x5F, (byte) 0xB5, (byte) 0x90, (byte) 0xDA, 0x43, (byte) 0xB6, (byte) 0x8C, 0x4E,
            (byte) 0xE6, (byte) 0xDA, 0x21, 0x47, 0x01, 0x13, 0x1F, 0x30, (byte) 0xDC, 0x48, 0x05, (byte) 0xEF, (byte) 0xA7, 0x65, 0x0B, 0x35,
            (byte) 0xBF, 0x38, (byte) 0x87, (byte) 0x9B, 0x2B, 0x03, (byte) 0xF6, (byte) 0xC9, (byte) 0xF4, 0x32, 0x41, (byte) 0xF3, (byte) 0x94, (byte) 0xE9, 0x6C, 0x22,
            (byte) 0x96, (byte) 0xDF, (byte) 0xAB, 0x2A, 0x2F, 0x31, 0x5B, 0x14, (byte) 0xD9, (byte) 0x8E, (byte) 0xBE, (byte) 0xF8, 0x01, 0x00, 0x00, 0x01,
            (byte) 0x85, 0x69, 0x43, 0x43, 0x50, 0x49, 0x43, 0x43, 0x20, 0x70, 0x72, 0x6F, 0x66, 0x69, 0x6C, 0x65,
                0x00, 0x00, 0x78, (byte) 0x9C, 0x7D, (byte) 0x91, 0x3D, 0x48, (byte) 0xC3, 0x40, 0x1C, (byte) 0xC5, 0x5F, 0x5B, 0x6B, 0x45,
                0x2A, 0x22, 0x76, (byte) 0x90, (byte) 0xE2, (byte) 0x90, (byte) 0xA1, (byte) 0xBA, 0x68, 0x41, 0x54, (byte) 0xC4, 0x51, (byte) 0xAB, 0x50, (byte) 0x84,
                0x0A, (byte) 0xA1, 0x56, 0x68, (byte) 0xD5, (byte) 0xC1, (byte) 0xE4, (byte) 0xD2, 0x0F, (byte) 0xA1, 0x49, 0x43, (byte) 0x92, (byte) 0xE2, (byte) 0xE2, 0x28,
            (byte) 0xB8, 0x16, 0x1C, (byte) 0xFC, 0x58, (byte) 0xAC, 0x3A, (byte) 0xB8, 0x38, (byte) 0xEB, (byte) 0xEA, (byte) 0xE0, 0x2A, 0x08, (byte) 0x82, 0x1F,
                0x20, (byte) 0xCE, 0x0E, 0x4E, (byte) 0x8A, 0x2E, 0x52, (byte) 0xE2, (byte) 0xFF, (byte) 0x92, 0x42, (byte) 0x8B, 0x18, 0x0F, (byte) 0x8E, (byte) 0xFB,
            (byte) 0xF1, (byte) 0xEE, (byte) 0xDE, (byte) 0xE3, (byte) 0xEE, 0x1D, (byte) 0xE0, (byte) 0xAF, (byte) 0x97, (byte) 0x99, 0x6A, 0x76, (byte) 0x8C, 0x01, (byte) 0xAA, 0x66,
                0x19, (byte) 0xE9, 0x64, 0x42, (byte) 0xC8, (byte) 0xE6, 0x56, (byte) 0x84, (byte) 0xD0, 0x2B, 0x3A, 0x11, 0x44, 0x1F, 0x46, 0x10,
            (byte) 0x95, (byte) 0x98, (byte) 0xA9, (byte) 0xCF, (byte) 0x8A, 0x62, 0x0A, (byte) 0x9E, (byte) 0xE3, (byte) 0xEB, 0x1E, 0x3E, (byte) 0xBE, (byte) 0xDE, (byte) 0xC5, 0x79,
            (byte) 0x96, (byte) 0xF7, (byte) 0xB9, 0x3F, 0x47, (byte) 0x8F, (byte) 0x92, 0x37, 0x19, (byte) 0xE0, 0x13, (byte) 0x88, 0x67, (byte) 0x98, 0x6E, 0x58,
            (byte) 0xC4, (byte) 0xEB, (byte) 0xC4, 0x53, (byte) 0x9B, (byte) 0x96, (byte) 0xCE, 0x79, (byte) 0x9F, 0x38, (byte) 0xC2, 0x4A, (byte) 0x92, 0x42, 0x7C, 0x4E,
                0x3C, 0x6A, (byte) 0xD0, 0x05, (byte) 0x89, 0x1F, (byte) 0xB9, 0x2E, (byte) 0xBB, (byte) 0xFC, (byte) 0xC6, (byte) 0xB9, (byte) 0xE8, (byte) 0xB0, (byte) 0x9F, 0x67,
                0x46, (byte) 0x8C, 0x4C, 0x7A, (byte) 0x8E, 0x38, 0x42, 0x2C, 0x14, (byte) 0xDB, 0x58, 0x6E, 0x63, 0x56, 0x32, 0x54,
            (byte) 0xE2, 0x49, (byte) 0xE2, (byte) 0x98, (byte) 0xA2, 0x6A, (byte) 0x94, (byte) 0xEF, (byte) 0xCF, (byte) 0xBA, (byte) 0xAC, 0x70, (byte) 0xDE, (byte) 0xE2, (byte) 0xAC, (byte) 0x96,
            (byte) 0xAB, (byte) 0xAC, 0x79, 0x4F, (byte) 0xFE, (byte) 0xC2, 0x70, 0x5E, 0x5B, 0x5E, (byte) 0xE2, 0x3A, (byte) 0xCD, 0x41, 0x24, (byte) 0xB1,
            (byte) 0x80, 0x45, (byte) 0x88, 0x10, 0x20, (byte) 0xA3, (byte) 0x8A, 0x0D, (byte) 0x94, 0x61, 0x21, 0x4E, (byte) 0xAB, 0x46, (byte) 0x8A, (byte) 0x89,
                0x34, (byte) 0xED, 0x27, 0x3C, (byte) 0xFC, 0x51, (byte) 0xC7, 0x2F, (byte) 0x92, 0x4B, 0x26, (byte) 0xD7, 0x06, 0x18, 0x39, (byte) 0xE6,
                0x51, (byte) 0x81, 0x0A, (byte) 0xC9, (byte) 0xF1, (byte) 0x83, (byte) 0xFF, (byte) 0xC1, (byte) 0xEF, 0x6E, (byte) 0xCD, (byte) 0xC2, (byte) 0xC4, (byte) 0xB8, (byte) 0x9B, 0x14,
                0x4E, 0x00, (byte) 0xC1, 0x17, (byte) 0xDB, (byte) 0xFE, 0x18, 0x02, 0x42, (byte) 0xBB, 0x40, (byte) 0xA3, 0x66, (byte) 0xDB, (byte) 0xDF, (byte) 0xC7,
            (byte) 0xB6, (byte) 0xDD, 0x38, 0x01, 0x02, (byte) 0xCF, (byte) 0xC0, (byte) 0x95, (byte) 0xD6, (byte) 0xF2, 0x57, (byte) 0xEA, (byte) 0xC0, (byte) 0xF4, 0x27, (byte) 0xE9,
            (byte) 0xB5, (byte) 0x96, 0x16, 0x3B, 0x02, 0x7A, (byte) 0xB7, (byte) 0x81, (byte) 0x8B, (byte) 0xEB, (byte) 0x96, 0x26, (byte) 0xEF, 0x01, (byte) 0x97, 0x3B,
            (byte) 0xC0, (byte) 0xC0, (byte) 0x93, 0x2E, 0x19, (byte) 0x92, 0x23, 0x05, 0x68, (byte) 0xFA, 0x0B, 0x05, (byte) 0xE0, (byte) 0xFD, (byte) 0x8C, (byte) 0xBE,
                0x29, 0x07, (byte) 0xF4, (byte) 0xDF, 0x02, (byte) 0xDD, (byte) 0xAB, 0x6E, 0x6F, (byte) 0xCD, 0x7D, (byte) 0x9C, 0x3E, 0x00, 0x19, (byte) 0xEA,
                0x2A, 0x75, 0x03, 0x1C, 0x1C, 0x02, (byte) 0xC3, 0x45, (byte) 0xCA, 0x5E, (byte) 0xF3, 0x78, 0x77, 0x57, 0x7B, 0x6F,
            (byte) 0xFF, (byte) 0x9E, 0x69, (byte) 0xF6, (byte) 0xF7, 0x03, 0x66, (byte) 0x80, 0x72, (byte) 0xA2, 0x31, 0x21, 0x1B, (byte) 0xE2, 0x00, 0x00,
                0x0D, 0x1A, 0x69, 0x54, 0x58, 0x74, 0x58, 0x4D, 0x4C, 0x3A, 0x63, 0x6F, 0x6D, 0x2E, 0x61, 0x64,
                0x6F, 0x62, 0x65, 0x2E, 0x78, 0x6D, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x3F, 0x78, 0x70,
                0x61, 0x63, 0x6B, 0x65, 0x74, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6E, 0x3D, 0x22, (byte) 0xEF, (byte) 0xBB, (byte) 0xBF,
                0x22, 0x20, 0x69, 0x64, 0x3D, 0x22, 0x57, 0x35, 0x4D, 0x30, 0x4D, 0x70, 0x43, 0x65, 0x68, 0x69,
                0x48, 0x7A, 0x72, 0x65, 0x53, 0x7A, 0x4E, 0x54, 0x63, 0x7A, 0x6B, 0x63, 0x39, 0x64, 0x22, 0x3F,
                0x3E, 0x0A, 0x3C, 0x78, 0x3A, 0x78, 0x6D, 0x70, 0x6D, 0x65, 0x74, 0x61, 0x20, 0x78, 0x6D, 0x6C,
                0x6E, 0x73, 0x3A, 0x78, 0x3D, 0x22, 0x61, 0x64, 0x6F, 0x62, 0x65, 0x3A, 0x6E, 0x73, 0x3A, 0x6D,
                0x65, 0x74, 0x61, 0x2F, 0x22, 0x20, 0x78, 0x3A, 0x78, 0x6D, 0x70, 0x74, 0x6B, 0x3D, 0x22, 0x58,
                0x4D, 0x50, 0x20, 0x43, 0x6F, 0x72, 0x65, 0x20, 0x34, 0x2E, 0x34, 0x2E, 0x30, 0x2D, 0x45, 0x78,
                0x69, 0x76, 0x32, 0x22, 0x3E, 0x0A, 0x20, 0x3C, 0x72, 0x64, 0x66, 0x3A, 0x52, 0x44, 0x46, 0x20,
                0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x72, 0x64, 0x66, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A,
                0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x77, 0x33, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x31, 0x39, 0x39,
                0x39, 0x2F, 0x30, 0x32, 0x2F, 0x32, 0x32, 0x2D, 0x72, 0x64, 0x66, 0x2D, 0x73, 0x79, 0x6E, 0x74,
                0x61, 0x78, 0x2D, 0x6E, 0x73, 0x23, 0x22, 0x3E, 0x0A, 0x20, 0x20, 0x3C, 0x72, 0x64, 0x66, 0x3A,
                0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x72, 0x64, 0x66, 0x3A,
                0x61, 0x62, 0x6F, 0x75, 0x74, 0x3D, 0x22, 0x22, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6D, 0x6C,
                0x6E, 0x73, 0x3A, 0x78, 0x6D, 0x70, 0x4D, 0x4D, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F,
                0x2F, 0x6E, 0x73, 0x2E, 0x61, 0x64, 0x6F, 0x62, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x78, 0x61,
                0x70, 0x2F, 0x31, 0x2E, 0x30, 0x2F, 0x6D, 0x6D, 0x2F, 0x22, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x78,
                0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x73, 0x74, 0x45, 0x76, 0x74, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70,
                0x3A, 0x2F, 0x2F, 0x6E, 0x73, 0x2E, 0x61, 0x64, 0x6F, 0x62, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x2F,
                0x78, 0x61, 0x70, 0x2F, 0x31, 0x2E, 0x30, 0x2F, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2F, 0x52, 0x65,
                0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x23, 0x22, 0x0A, 0x20, 0x20,
                0x20, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x64, 0x63, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70,
                0x3A, 0x2F, 0x2F, 0x70, 0x75, 0x72, 0x6C, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x64, 0x63, 0x2F, 0x65,
                0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x2F, 0x31, 0x2E, 0x31, 0x2F, 0x22, 0x0A, 0x20, 0x20,
                0x20, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x47, 0x49, 0x4D, 0x50, 0x3D, 0x22, 0x68, 0x74,
                0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x67, 0x69, 0x6D, 0x70, 0x2E, 0x6F, 0x72,
                0x67, 0x2F, 0x78, 0x6D, 0x70, 0x2F, 0x22, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6D, 0x6C, 0x6E,
                0x73, 0x3A, 0x74, 0x69, 0x66, 0x66, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x6E,
                0x73, 0x2E, 0x61, 0x64, 0x6F, 0x62, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x74, 0x69, 0x66, 0x66,
                0x2F, 0x31, 0x2E, 0x30, 0x2F, 0x22, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73,
                0x3A, 0x78, 0x6D, 0x70, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x6E, 0x73, 0x2E,
                0x61, 0x64, 0x6F, 0x62, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x78, 0x61, 0x70, 0x2F, 0x31, 0x2E,
                0x30, 0x2F, 0x22, 0x0A, 0x20, 0x20, 0x20, 0x78, 0x6D, 0x70, 0x4D, 0x4D, 0x3A, 0x44, 0x6F, 0x63,
                0x75, 0x6D, 0x65, 0x6E, 0x74, 0x49, 0x44, 0x3D, 0x22, 0x67, 0x69, 0x6D, 0x70, 0x3A, 0x64, 0x6F,
                0x63, 0x69, 0x64, 0x3A, 0x67, 0x69, 0x6D, 0x70, 0x3A, 0x34, 0x31, 0x36, 0x66, 0x32, 0x36, 0x61,
                0x62, 0x2D, 0x35, 0x62, 0x62, 0x36, 0x2D, 0x34, 0x37, 0x37, 0x66, 0x2D, 0x39, 0x64, 0x65, 0x38,
                0x2D, 0x33, 0x31, 0x31, 0x31, 0x36, 0x63, 0x33, 0x37, 0x30, 0x39, 0x38, 0x37, 0x22, 0x0A, 0x20,
                0x20, 0x20, 0x78, 0x6D, 0x70, 0x4D, 0x4D, 0x3A, 0x49, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65,
                0x49, 0x44, 0x3D, 0x22, 0x78, 0x6D, 0x70, 0x2E, 0x69, 0x69, 0x64, 0x3A, 0x36, 0x61, 0x61, 0x64,
                0x36, 0x61, 0x63, 0x34, 0x2D, 0x35, 0x65, 0x63, 0x30, 0x2D, 0x34, 0x66, 0x32, 0x64, 0x2D, 0x61,
                0x37, 0x63, 0x34, 0x2D, 0x62, 0x35, 0x38, 0x34, 0x64, 0x63, 0x64, 0x63, 0x30, 0x33, 0x61, 0x66,
                0x22, 0x0A, 0x20, 0x20, 0x20, 0x78, 0x6D, 0x70, 0x4D, 0x4D, 0x3A, 0x4F, 0x72, 0x69, 0x67, 0x69,
                0x6E, 0x61, 0x6C, 0x44, 0x6F, 0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x49, 0x44, 0x3D, 0x22, 0x78,
                0x6D, 0x70, 0x2E, 0x64, 0x69, 0x64, 0x3A, 0x31, 0x65, 0x64, 0x35, 0x63, 0x35, 0x38, 0x30, 0x2D,
                0x32, 0x37, 0x61, 0x35, 0x2D, 0x34, 0x63, 0x34, 0x64, 0x2D, 0x61, 0x64, 0x36, 0x39, 0x2D, 0x39,
                0x33, 0x63, 0x64, 0x35, 0x30, 0x37, 0x30, 0x66, 0x33, 0x34, 0x39, 0x22, 0x0A, 0x20, 0x20, 0x20,
                0x64, 0x63, 0x3A, 0x46, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x3D, 0x22, 0x69, 0x6D, 0x61, 0x67, 0x65,
                0x2F, 0x70, 0x6E, 0x67, 0x22, 0x0A, 0x20, 0x20, 0x20, 0x47, 0x49, 0x4D, 0x50, 0x3A, 0x41, 0x50,
                0x49, 0x3D, 0x22, 0x32, 0x2E, 0x30, 0x22, 0x0A, 0x20, 0x20, 0x20, 0x47, 0x49, 0x4D, 0x50, 0x3A,
                0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72, 0x6D, 0x3D, 0x22, 0x4C, 0x69, 0x6E, 0x75, 0x78, 0x22,
                0x0A, 0x20, 0x20, 0x20, 0x47, 0x49, 0x4D, 0x50, 0x3A, 0x54, 0x69, 0x6D, 0x65, 0x53, 0x74, 0x61,
                0x6D, 0x70, 0x3D, 0x22, 0x31, 0x37, 0x31, 0x37, 0x36, 0x30, 0x39, 0x39, 0x35, 0x33, 0x32, 0x30,
                0x32, 0x32, 0x37, 0x30, 0x22, 0x0A, 0x20, 0x20, 0x20, 0x47, 0x49, 0x4D, 0x50, 0x3A, 0x56, 0x65,
                0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x32, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x30, 0x22, 0x0A,
                0x20, 0x20, 0x20, 0x74, 0x69, 0x66, 0x66, 0x3A, 0x4F, 0x72, 0x69, 0x65, 0x6E, 0x74, 0x61, 0x74,
                0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x22, 0x0A, 0x20, 0x20, 0x20, 0x78, 0x6D, 0x70, 0x3A, 0x43,
                0x72, 0x65, 0x61, 0x74, 0x6F, 0x72, 0x54, 0x6F, 0x6F, 0x6C, 0x3D, 0x22, 0x47, 0x49, 0x4D, 0x50,
                0x20, 0x32, 0x2E, 0x31, 0x30, 0x22, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x3C, 0x78, 0x6D, 0x70, 0x4D,
                0x4D, 0x3A, 0x48, 0x69, 0x73, 0x74, 0x6F, 0x72, 0x79, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x3C,
                0x72, 0x64, 0x66, 0x3A, 0x53, 0x65, 0x71, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x72,
                0x64, 0x66, 0x3A, 0x6C, 0x69, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x45, 0x76,
                0x74, 0x3A, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x73, 0x61, 0x76, 0x65, 0x64, 0x22,
                0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x45, 0x76, 0x74, 0x3A, 0x63, 0x68, 0x61,
                0x6E, 0x67, 0x65, 0x64, 0x3D, 0x22, 0x2F, 0x22, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x73,
                0x74, 0x45, 0x76, 0x74, 0x3A, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x49, 0x44, 0x3D,
                0x22, 0x78, 0x6D, 0x70, 0x2E, 0x69, 0x69, 0x64, 0x3A, 0x64, 0x64, 0x64, 0x38, 0x39, 0x33, 0x33,
                0x66, 0x2D, 0x61, 0x32, 0x31, 0x37, 0x2D, 0x34, 0x36, 0x63, 0x65, 0x2D, 0x61, 0x66, 0x66, 0x63,
                0x2D, 0x34, 0x36, 0x35, 0x61, 0x64, 0x63, 0x33, 0x37, 0x63, 0x63, 0x31, 0x34, 0x22, 0x0A, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x45, 0x76, 0x74, 0x3A, 0x73, 0x6F, 0x66, 0x74, 0x77,
                0x61, 0x72, 0x65, 0x41, 0x67, 0x65, 0x6E, 0x74, 0x3D, 0x22, 0x47, 0x69, 0x6D, 0x70, 0x20, 0x32,
                0x2E, 0x31, 0x30, 0x20, 0x28, 0x4C, 0x69, 0x6E, 0x75, 0x78, 0x29, 0x22, 0x0A, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x73, 0x74, 0x45, 0x76, 0x74, 0x3A, 0x77, 0x68, 0x65, 0x6E, 0x3D, 0x22, 0x32,
                0x30, 0x32, 0x34, 0x2D, 0x30, 0x36, 0x2D, 0x30, 0x35, 0x54, 0x32, 0x30, 0x3A, 0x35, 0x32, 0x3A,
                0x33, 0x33, 0x2B, 0x30, 0x33, 0x3A, 0x30, 0x30, 0x22, 0x2F, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x20,
                0x3C, 0x2F, 0x72, 0x64, 0x66, 0x3A, 0x53, 0x65, 0x71, 0x3E, 0x0A, 0x20, 0x20, 0x20, 0x3C, 0x2F,
                0x78, 0x6D, 0x70, 0x4D, 0x4D, 0x3A, 0x48, 0x69, 0x73, 0x74, 0x6F, 0x72, 0x79, 0x3E, 0x0A, 0x20,
                0x20, 0x3C, 0x2F, 0x72, 0x64, 0x66, 0x3A, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
                0x6F, 0x6E, 0x3E, 0x0A, 0x20, 0x3C, 0x2F, 0x72, 0x64, 0x66, 0x3A, 0x52, 0x44, 0x46, 0x3E, 0x0A,
                0x3C, 0x2F, 0x78, 0x3A, 0x78, 0x6D, 0x70, 0x6D, 0x65, 0x74, 0x61, 0x3E, 0x0A, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x3C, 0x3F, 0x78,
                0x70, 0x61, 0x63, 0x6B, 0x65, 0x74, 0x20, 0x65, 0x6E, 0x64, 0x3D, 0x22, 0x77, 0x22, 0x3F, 0x3E,
                0x4A, 0x31, 0x7B, (byte) 0x9A, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13,
                0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, (byte) 0x9A, (byte) 0x9C, 0x18, 0x00, 0x00, 0x00, 0x07, 0x74, 0x49, 0x4D,
                0x45, 0x07, (byte) 0xE8, 0x06, 0x05, 0x11, 0x34, 0x21, 0x64, (byte) 0xFA, 0x1C, 0x33, 0x00, 0x00, 0x00, 0x4B,
                0x49, 0x44, 0x41, 0x54, 0x58, (byte) 0xC3, (byte) 0xED, (byte) 0xD6, (byte) 0xC1, 0x09, 0x00, 0x20, 0x0C, 0x04, (byte) 0xC1, (byte) 0x8D,
                0x58, (byte) 0x8F, (byte) 0xFD, (byte) 0xD7, 0x61, 0x43, (byte) 0xDA, 0x41, 0x7C, (byte) 0x88, (byte) 0xE4, (byte) 0xE1, (byte) 0xDE, 0x37, 0x04, 0x06,
                0x42, (byte) 0xE0, 0x02, 0x58, 0x24, 0x59, (byte) 0xCC, 0x6C, 0x4C, 0x30, (byte) 0xB8, (byte) 0xD9, 0x6F, 0x14, 0x47, (byte) 0x80,
                0x00, 0x01, (byte) 0xFD, (byte) 0xF5, (byte) 0x9F, (byte) 0x9F, (byte) 0xF6, 0x3D, (byte) 0x81, 0x00, 0x01, (byte) 0xE5, (byte) 0x80, (byte) 0xB0, 0x0F, 0x08,
                0x10, 0x60, 0x1F, (byte) 0xB0, 0x0F, 0x08, 0x10, (byte) 0xF0, 0x3D, 0x60, 0x03, (byte) 0xF6, (byte) 0xEB, 0x11, (byte) 0xE3, (byte) 0xED,
            (byte) 0xBB, 0x31, 0x24, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, (byte) 0xAE, 0x42, 0x60, (byte) 0x82
    };

//    static {
//        byte[] defaultTexture_temp;
//        try {
//            defaultTexture_temp = Objects.requireNonNull(
//                    Thread.
//                            currentThread()
//                            .getContextClassLoader()
//                            .getResourceAsStream("/default_texture.png")
//                    ,"Default texture could not be found"
//            ).readAllBytes();
//        } catch (Exception e) {
//            defaultTexture_temp = null;
//            logger.log(FATAL, "Unable to load default texture\n%s".formatted(new ExcParser(e)));
//            crash(e);
//            postExit(false);
//        }
//
//        defaultTexture = defaultTexture_temp;
//    }

    private ModelLoader() throws UnsupportedOperationException {
        throw new UnsupportedOperationException("Utility class");
    }

    public static void generateDefaultModel(String modelPath) throws IOException {
        File modelFolder = new File(modelPath).getParentFile();

        if (!modelFolder.exists()) {
            if (!modelFolder.mkdirs()) {
                throw new IOException("Could not create directory '%s'".formatted(modelFolder));
            }
        }

        File modelFile = new File(modelPath);
        File materialFile = new File(modelFolder.getPath()+"/"+modelFile.getName().replaceFirst("\\.obj", "")+".mtl");
        File textureFile = new File(modelFolder.getPath()+"/texture.png");

        if (!textureFile.exists()) {
            if (!textureFile.createNewFile()) throw new IOException("Could not create texture file '%s'".formatted(textureFile.getPath()));
            try (FileOutputStream outputStream = new FileOutputStream(textureFile)) {
                outputStream.write(defaultTexture);
            }
        }

        if (!materialFile.exists()) {
            if (!materialFile.createNewFile()) throw new IOException("Could not create material file '%s'".formatted(materialFile.getPath()));
            try (FileOutputStream outputStream = new FileOutputStream(materialFile)) {
                outputStream.write(defaultMTLMaterial.getBytes(StandardCharsets.UTF_8));
            }
        }

        if (!modelFile.exists()) {
            if (!modelFile.createNewFile()) throw new IOException("Could not create model file '%s'".formatted(modelFile.getPath()));
            try (FileOutputStream outputStream = new FileOutputStream(modelFile)) {
                outputStream.write(defaultOBJModel.getBytes(StandardCharsets.UTF_8));
            }
        }
    }


    @Contract("_, _, _ -> new")
    public static @NotNull Model loadModel(String modelId, String modelPath, TextureCache textureCache) {
        return loadModel(modelId, modelPath, textureCache, aiProcess_GenSmoothNormals | aiProcess_JoinIdenticalVertices |
                aiProcess_Triangulate | aiProcess_FixInfacingNormals | aiProcess_CalcTangentSpace | aiProcess_LimitBoneWeights |
                aiProcess_PreTransformVertices);
    }

    @Contract("_, _, _, _ -> new")
    public static @NotNull Model loadModel(String modelId, String modelPath, TextureCache textureCache, int flags) {
        File file = new File(modelPath);
        if (!file.exists() || !new File(file.getParentFile().getPath()+"/texture.png").exists()) {
            logger.log(WARN, "Texture for '%s' is missing, using default texture".formatted(modelPath));
            try {
                generateDefaultModel(modelPath);
            } catch (IOException e) {
                logger.log(FATAL, "Error generating default model\n%s".formatted(new ExcParser(e)));
                crash(e);
                postExit(false);
            }
        }

        String modelDir = file.getParent();

        AIScene aiScene = aiImportFile(modelPath,flags);
        if (aiScene == null) {
            throw new ModelNotFoundException(modelId, modelPath);
        }

        int numMaterials = aiScene.mNumMaterials();
        List<Material> materialList = new ArrayList<>();
        for (int i = 0; i < numMaterials; i++) {
            AIMaterial aiMaterial = AIMaterial.create(aiScene.mMaterials().get(i));
            materialList.add(processMaterial(aiMaterial, modelDir, textureCache));
        }

        int numMeshes = aiScene.mNumMeshes();
        PointerBuffer aiMeshes = aiScene.mMeshes();
        Material defaultMaterial = new Material();
        for (int i = 0; i < numMeshes; i++) {
            AIMesh aiMesh = AIMesh.create(aiMeshes.get(i));
            Mesh mesh = processMesh(aiMesh);
            int materialIdx = aiMesh.mMaterialIndex();
            Material material;
            if (materialIdx >= 0 && materialIdx < materialList.size()) {
                material = materialList.get(materialIdx);
            } else {
                material = defaultMaterial;
            }
            material.getMeshList().add(mesh);
        }

        if (!defaultMaterial.getMeshList().isEmpty()) {
            materialList.add(defaultMaterial);
        }

        return new Model(modelId, materialList);
    }

    private static Material processMaterial(AIMaterial aiMaterial, String modelDir, TextureCache textureCache) {
        Material material = new Material();
        try (MemoryStack stack = MemoryStack.stackPush()) {
            AIColor4D color = AIColor4D.create();

            int result = aiGetMaterialColor(aiMaterial, AI_MATKEY_COLOR_DIFFUSE, aiTextureType_NONE, 0,
                    color);
            if (result == aiReturn_SUCCESS) {
                material.setDiffuseColor(new Vector4f(color.r(), color.g(), color.b(), color.a()));
            }

            AIString aiTexturePath = AIString.callocStack(stack);
            aiGetMaterialTexture(aiMaterial, aiTextureType_DIFFUSE, 0, aiTexturePath, (IntBuffer) null,
                    null, null, null, null, null);
            String texturePath = aiTexturePath.dataString();
            if (texturePath != null && !texturePath.isEmpty()) {
                material.setTexturePath(modelDir + File.separator + new File(texturePath).getName());
                textureCache.createTexture(material.getTexturePath());
                material.setDiffuseColor(Material.DEFAULT_COLOR);
            }

            return material;
        }
    }

    @Contract("_ -> new")
    private static @NotNull Mesh processMesh(AIMesh aiMesh) {
        float[] vertices = processVertices(aiMesh);
        float[] textCoords = processTextCoords(aiMesh);
        int[] indices = processIndices(aiMesh);

        // Texture coordinates may not have been populated. We need at least the empty slots
        if (textCoords.length == 0) {
            int numElements = (vertices.length / 3) * 2;
            textCoords = new float[numElements];
        }

        return new Mesh(vertices, textCoords, indices);
    }

    private static int[] processIndices(@NotNull AIMesh aiMesh) {
        List<Integer> indices = new ArrayList<>();
        int numFaces = aiMesh.mNumFaces();
        AIFace.Buffer aiFaces = aiMesh.mFaces();
        for (int i = 0; i < numFaces; i++) {
            AIFace aiFace = aiFaces.get(i);
            IntBuffer buffer = aiFace.mIndices();
            while (buffer.remaining() > 0) {
                indices.add(buffer.get());
            }
        }
        return indices.stream().mapToInt(Integer::intValue).toArray();
    }

    private static float @NotNull [] processTextCoords(@NotNull AIMesh aiMesh) {
        AIVector3D.Buffer buffer = aiMesh.mTextureCoords(0);
        if (buffer == null) {
            return new float[]{};
        }
        float[] data = new float[buffer.remaining() * 2];
        int pos = 0;
        while (buffer.remaining() > 0) {
            AIVector3D textCoord = buffer.get();
            data[pos++] = textCoord.x();
            data[pos++] = 1 - textCoord.y();
        }
        return data;
    }

    private static float @NotNull [] processVertices(@NotNull AIMesh aiMesh) {
        AIVector3D.Buffer buffer = aiMesh.mVertices();
        float[] data = new float[buffer.remaining() * 3];
        int pos = 0;
        while (buffer.remaining() > 0) {
            AIVector3D textCoord = buffer.get();
            data[pos++] = textCoord.x();
            data[pos++] = textCoord.y();
            data[pos++] = textCoord.z();
        }
        return data;
    }

    public static class ModelNotFoundException extends ModelLoadingException implements Serializable {
        @Serial
        private static final long serialVersionUID = -2706601747707774040L;

        public ModelNotFoundException(String modelId, String modelPath) {
            super(String.format("Model '%s' not found at '%s'", modelId, modelPath));
        }
    }

    public static class ModelLoadingException extends RuntimeException implements Serializable {
        @Serial
        private static final long serialVersionUID = 8348948575069807976L;


        @SuppressWarnings("unused")
        public ModelLoadingException(String modelId, String modelPath) {
            super(String.format("Failed to load model '%s' at '%s'", modelId, modelPath));
        }

        public ModelLoadingException(String message) {
            super(message);
        }
    }
}
